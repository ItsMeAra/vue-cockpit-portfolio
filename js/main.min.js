!function(n){"use strict";n('a.js-scroll-trigger[href*="#"]:not([href="#"])').click(function(){if(location.pathname.replace(/^\//,"")==this.pathname.replace(/^\//,"")&&location.hostname==this.hostname){var t=n(this.hash);if((t=t.length?t:n("[name="+this.hash.slice(1)+"]")).length)return n("html, body").animate({scrollTop:t.offset().top},1e3,"easeInOutExpo"),!1}}),n(".js-scroll-trigger").click(function(){n(".navbar-collapse").collapse("hide")}),n("body").scrollspy({target:"#sideNav"})}(jQuery);var init=function(){var n={apiUrl:"localhost"==location.hostname?"http://localhost:8000/admin":location.protocol+"//"+location.hostname+location.pathname+"admin",apiKey:"fcfaf298e1e7ba680da3ca07af3dda",basePath:location.pathname.slice(0,-1),collections:{},regions:{}};window.location.search.indexOf("hint")>0&&($(':not(:has(div)):contains("{{")').each(function(){var n=$(this),t=n.text();if(t.indexOf("regions.")>0||t.indexOf("collections.")>0){var e=t.replace("{{","").replace("}}","").split("."),i=e[0],o=e[1];0==n.parents(".has-binding").length&&(n.css("border","1px dashed red").css("cursor","pointer"),n.attr("entity-type",i),n.attr("entity-name",o),n.addClass("has-binding"))}}),$("body").on("click",".has-binding",function(){var t=$(this),e=t.attr("entity-type"),i=t.attr("entity-name");window.open(n.apiUrl+"/"+e+"/form/"+i)})),fetch(n.apiUrl+"/api/collections/listCollections?token="+n.apiKey).then(function(n){return n.json()}).then(function(t){n.collectionNames=t,t.forEach(function(t){n.collections[t]=[]}),fetch(n.apiUrl+"/api/regions/listRegions?token="+n.apiKey).then(function(n){return n.json()}).then(function(t){n.regionNames=t,t.forEach(function(t){n.regions[t]=[]}),new Vue({el:"#app",data:n,created:function(){this.fetchAllCollectionEntries(),this.fetchAllRegionEntries()},methods:{openCockpitPage:function(n,t){alert(n+":"+t)},fetchAllRegionEntries:function(){var n=this;this.regionNames.forEach(function(t){n.fetchRegionEntries(t)}),console.log(n)},fetchRegionEntries:function(t){var e=this;fetch(n.apiUrl+"/api/regions/data/"+t+"?token="+this.apiKey).then(function(n){return n.json()}).then(function(n){e.regions[t]=n}).catch(function(n){console.log("parsing failed",n)})},fetchAllCollectionEntries:function(){var n=this;this.collectionNames.forEach(function(t){n.fetchCollectionEntries(t)})},fetchCollectionEntries:function(t){var e=this;fetch(n.apiUrl+"/api/collections/get/"+t+"?token="+this.apiKey).then(function(n){return n.json()}).then(function(n){e.collections[t]=n.entries}).catch(function(n){console.log("parsing failed",n)})}}})})}).catch(function(n){console.log("parsing failed",n)})};init();